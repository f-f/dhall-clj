(ns dhall-clojure.in.core)


;; All classes that form the expression tree
(defrecord Const [c])
(defrecord Var [var i])
(defrecord Lam [arg type body])
(defrecord Pi [arg type body])
(defrecord App [a b])
(defrecord Let [label type? body next])
(defrecord Annot [val type])
(defrecord BoolT [])
(defrecord BoolLit [b])
(defrecord BoolAnd [a b])
(defrecord BoolOr [a b])
(defrecord BoolEQ [a b])
(defrecord BoolNE [a b])
(defrecord BoolIf [test then else])
(defrecord NaturalT [])
(defrecord NaturalLit [n])
(defrecord NaturalFold [])
(defrecord NaturalBuild [])
(defrecord NaturalIsZero [])
(defrecord NaturalEven [])
(defrecord NaturalOdd [])
(defrecord NaturalToInteger [])
(defrecord NaturalShow [])
(defrecord NaturalPlus [a b])
(defrecord NaturalTimes [a b])
(defrecord IntegerT [])
(defrecord IntegerLit [n])
(defrecord IntegerShow [])
(defrecord DoubleT [])
(defrecord DoubleLit [n])
(defrecord DoubleShow [])
(defrecord TextT [])
(defrecord TextLit [chunks])
(defrecord TextAppend [a b])
(defrecord ListT [])
(defrecord ListLit [type? exprs])
(defrecord ListAppend [a b])
(defrecord ListBuild [])
(defrecord ListFold [])
(defrecord ListLength [])
(defrecord ListHead [])
(defrecord ListLast [])
(defrecord ListIndexed [])
(defrecord ListReverse [])
(defrecord OptionalT [])
(defrecord OptionalLit [type val?])
(defrecord OptionalFold [])
(defrecord OptionalBuild [])
(defrecord RecordT [kvs])
(defrecord RecordLit [kvs])
(defrecord UnionT [kvs])
(defrecord UnionLit [k v kvs])
(defrecord Combine [a b])
(defrecord CombineTypes [a b])
(defrecord Prefer [a b])
(defrecord Merge [a b type?])
(defrecord Constructors [e])
(defrecord Field [e k])
(defrecord Project [e ks])
;; TODO: Note
;; TODO: Embed
